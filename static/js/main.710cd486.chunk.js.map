{"version":3,"sources":["state/action-types/index.ts","styles/global.ts","images/play.svg","images/pause.svg","images/stop.svg","images/fullscreen.svg","components/ProgressBar/ProgressBar.tsx","components/ButtonsWrap/ButtonsWrap.tsx","components/ControlsGroup/ControlsGroup.tsx","utils/calculateMinSec.ts","components/TimeDisplay/TimeDisplay.tsx","components/Button/Button.tsx","images/mutedBtn.svg","images/volumeBtn.svg","state/action-creators/index.ts","state/initial-state/initialState.ts","state/reducers/index.ts","state/reducers/videoSettingsReducer.ts","state/store.ts","hooks/useBarColor.ts","utils/calculateCurrentPercent.ts","components/VolumeBlock/VolumeBlock.tsx","utils/constants/constants.ts","components/Controls/Controls.tsx","components/Video/Video.tsx","hooks/useMuteVideo.ts","hooks/usePlayPauseStopVideo.ts","components/Wrapper/Wrapper.tsx","hooks/useVideoUrl.ts","api/api.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionType","GlobalStyle","createGlobalStyle","progressBarHeight","ProgressBar","styled","input","attrs","type","props","percent","ButtonsWrap","div","ControlsGroup","calculateMinSec","time","minutes","Math","floor","seconds","StyledTimeDisplay","span","TimeDisplay","state","useSelector","settings","duration","caption","Button","button","background","setSrc","url","dispatch","SET_SRC","payload","setVolume","volume","SET_VOLUME","rewindVideo","REWIND","measureDuration","SET_DURATION","initialState","src","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","useBarColor","current","useState","setPercent","useEffect","full","calculateCurrentPercent","StyledVolumeBlock","VolumeBar","VolumeBlock","handleVolume","handleMuteState","muted","useDispatch","bindActionCreators","ActionCreators","min","max","step","value","onChange","event","target","valueAsNumber","onClick","mutedBtn","volumeBtn","ControlsWrap","Controls","handlePlayPause","handleStop","paused","handleFullscreen","handleVideoRewind","timePercent","play","pause","stop","fullscreen","VideoWrapper","StyledVideo","video","Video","vidRef","useRef","wrapperRef","setMuted","useMuteVideo","setPaused","handlePlayPauseVideo","handleStopVideo","currentTime","usePlayPauseStopVideo","id","ref","onTimeUpdate","onLoadedData","document","fullscreenElement","exitFullscreen","docSafari","webkitExitFullscreen","closeFs","videoWrapper","requestFullscreen","webkitRequestFullscreen","openFs","StyledWrapper","Wrapper","children","useVideoUrl","fetch","then","res","ok","json","Promise","reject","status","find","data","format","catch","err","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.710cd486.chunk.js","sourcesContent":["export enum ActionType {\r\n  SET_SRC ='SET_SRC',\r\n  SET_VOLUME = 'SET_VOLUME',\r\n  SET_TIME_CAPTION = 'SET_TIME_CAPTION',\r\n  REWIND = 'REWIND',\r\n  SET_DURATION = 'SET_DURATION'\r\n}","import {createGlobalStyle} from \"styled-components\"\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    background: linear-gradient(180deg, rgba(3,131,255,1) 0%, rgba(0,255,248,1) 100%);\r\n    font-family: Open-Sans, Helvetica, Sans-Serif;\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/play.9fa020dc.svg\";","export default __webpack_public_path__ + \"static/media/pause.4242ab2e.svg\";","export default __webpack_public_path__ + \"static/media/stop.d771b297.svg\";","export default __webpack_public_path__ + \"static/media/fullscreen.ff965a6f.svg\";","import styled from \"styled-components\";\r\nimport { RangeGradientProp } from \"../../models/RangeGradientProps\";\r\n\r\nconst progressBarHeight = '10px';\r\n\r\nexport const ProgressBar = styled.input.attrs({\r\n  type: \"range\"\r\n})<RangeGradientProp>`\r\n  appearance: none;\r\n  height: ${progressBarHeight};\r\n  overflow: hidden;\r\n  width: 100%;\r\n  margin: 0;\r\n  background: linear-gradient(to right, red 0%, red ${props => props.percent}%, #878585 ${props => props.percent}%, #878585 100%);\r\n\r\n  &::-webkit-slider-thumb {\r\n    height: ${progressBarHeight};\r\n    width: ${progressBarHeight};\r\n    appearance: none;\r\n    background: white;\r\n    border-radius: 50%;\r\n  }\r\n\r\n  &::-moz-range-thumb {\r\n    height: ${progressBarHeight};\r\n    width: ${progressBarHeight};\r\n    background: white;\r\n    border-radius: 50%;\r\n    position: relative;\r\n  }\r\n`","import styled from \"styled-components\";\r\n\r\nexport const ButtonsWrap = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  background-color: #273136;\r\n  height: 30px;\r\n  padding: 0 5px;\r\n  box-sizing: border-box;\r\n`","import styled from \"styled-components\";\r\n\r\nexport const ControlsGroup = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`","export const calculateMinSec = (time: number): string => {\r\n  let minutes = Math.floor(time / 60);\r\n  let seconds = Math.floor(time - minutes * 60);\r\n  let minuteValue;\r\n  let secondValue;\r\n\r\n  if (minutes < 10) {\r\n    minuteValue = '0' + minutes;\r\n  } else {\r\n    minuteValue = minutes;\r\n  }\r\n\r\n  if (seconds < 10) {\r\n    secondValue = '0' + seconds;\r\n  } else {\r\n    secondValue = seconds;\r\n  }\r\n\r\n  return minuteValue + ':' + secondValue;\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State } from \"../../state\";\r\nimport { calculateMinSec } from \"../../utils/calculateMinSec\";\r\n\r\nconst StyledTimeDisplay = styled.span`\r\n  color: white;\r\n  font-size: 1rem;\r\n  display: block;\r\n  opacity: 0.6;\r\n`\r\n\r\nexport const TimeDisplay: React.FC = () => {\r\n\r\n  const state = useSelector((state: State) => state.settings);\r\n\r\n\r\n  return (\r\n    <StyledTimeDisplay>{ calculateMinSec(state.time) } / { state.duration.caption } </StyledTimeDisplay>\r\n  )\r\n}","import styled from \"styled-components\";\r\nimport { BtnBackgroundImageProp } from \"../../models/BtnBackgroundImageProp\";\r\n\r\nexport const Button = styled.button<BtnBackgroundImageProp>`\r\n  width: 1.5rem;\r\n  height: 1.5rem;\r\n  padding: 0;\r\n  border: none;\r\n  outline: none;\r\n  background-size: 1.5rem 1.5rem;\r\n  cursor: pointer;\r\n  opacity: 1;\r\n  transition: opacity 0.3s ease;\r\n  margin-right: 5px;\r\n  background:  ${props => `url(${props.background}) transparent no-repeat center`};\r\n\r\n  &:last-child {\r\n    margin-right: 0;\r\n  }\r\n\r\n  &:hover {\r\n    opacity: .7;\r\n  }\r\n`\r\n","export default __webpack_public_path__ + \"static/media/mutedBtn.11497865.svg\";","export default __webpack_public_path__ + \"static/media/volumeBtn.e9b56cba.svg\";","import { Dispatch } from \"redux\";\r\nimport { Action } from \"../actions\";\r\nimport { ActionType } from \"../action-types\";\r\n\r\nexport const setSrc = (url: string) => {\r\n  return (dispatch: Dispatch<Action>) => {\r\n    dispatch({\r\n      type: ActionType.SET_SRC,\r\n      payload: url\r\n    })\r\n  }\r\n}\r\n\r\nexport const setVolume = (volume: number) => {\r\n  return (dispatch: Dispatch<Action>) => {\r\n    dispatch({\r\n      type: ActionType.SET_VOLUME,\r\n      payload: volume\r\n    })\r\n  }\r\n}\r\n\r\nexport const rewindVideo = (seconds: number) => {\r\n  return (dispatch: Dispatch<Action>) => {\r\n    dispatch({\r\n      type: ActionType.REWIND,\r\n      payload: seconds\r\n    })\r\n  }\r\n}\r\n\r\nexport const measureDuration = (duration: number) => {\r\n  return (dispatch: Dispatch<Action>) => {\r\n    dispatch({\r\n      type: ActionType.SET_DURATION,\r\n      payload: duration\r\n    })\r\n  }\r\n}","export interface State {\r\n  src: string;\r\n  volume: number;\r\n  time: number;\r\n  duration: {\r\n    caption: string;\r\n    seconds: number\r\n  }\r\n}\r\n\r\nexport const initialState = {\r\n  src: '',\r\n  volume: 1,\r\n  time: 0,\r\n  duration: {\r\n    caption: '00:00',\r\n    seconds: 0\r\n  }\r\n}","import { combineReducers } from \"redux\";\r\nimport { videoSettingsReducer } from \"./videoSettingsReducer\";\r\n\r\nconst reducers = combineReducers({\r\n  settings: videoSettingsReducer\r\n});\r\n\r\nexport default reducers;\r\n\r\nexport type State = ReturnType<typeof reducers>;","import { Action } from \"../actions\";\r\nimport { ActionType } from \"../action-types\";\r\nimport { calculateMinSec } from \"../../utils/calculateMinSec\";\r\nimport { initialState, State } from \"../initial-state/initialState\";\r\n\r\nexport const videoSettingsReducer = (state: State = initialState, action: Action) => {\r\n  switch (action.type) {\r\n    case ActionType.SET_SRC:\r\n      return {\r\n        ...state,\r\n        src: action.payload\r\n      }\r\n    case ActionType.SET_VOLUME:\r\n      return {\r\n        ...state,\r\n        volume: action.payload\r\n      }\r\n    case ActionType.REWIND:\r\n      return {\r\n        ...state,\r\n        time: action.payload\r\n      }\r\n    case ActionType.SET_DURATION:\r\n      return {\r\n        ...state,\r\n        duration: {\r\n          caption: calculateMinSec(action.payload),\r\n          seconds: action.payload\r\n        }\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { createStore, applyMiddleware } from \"redux\";\r\nimport reducers from \"./reducers\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport const store = createStore(\r\n  reducers,\r\n  {},\r\n  applyMiddleware(thunk)\r\n)","import { useEffect, useState } from \"react\";\r\nimport { calculateCurrentPercent } from \"../utils/calculateCurrentPercent\";\r\n\r\nexport const useBarColor = (current: number, duration: number): number => {\r\n  const [percent, setPercent] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setPercent(calculateCurrentPercent(current, duration))\r\n  }, [current, duration]);\r\n\r\n  return percent;\r\n}","export const calculateCurrentPercent = (current: number, full: number): number => {\r\n  return current * 100 / full;\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { RangeGradientProp } from \"../../models/RangeGradientProps\";\r\nimport { Button } from \"../Button/Button\";\r\nimport mutedBtn from \"../../images/mutedBtn.svg\";\r\nimport volumeBtn from \"../../images/volumeBtn.svg\";\r\nimport { ControlsProps } from \"../../models/ControlsProps\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { ActionCreators, State } from \"../../state\";\r\nimport { useBarColor } from \"../../hooks/useBarColor\";\r\nimport { maxVolume } from \"../../utils/constants/constants\";\r\n\r\nconst StyledVolumeBlock = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin-right: 5px;\r\n`\r\n\r\nconst VolumeBar = styled.input.attrs({\r\n  type: \"range\"\r\n})<RangeGradientProp>`\r\n  margin: 0 5px;\r\n  display: none;\r\n  appearance: none;\r\n  height: 5px;\r\n  overflow: hidden;\r\n  width: 80%;\r\n  background: linear-gradient(to right, #dd5e5e 0%, #dd5e5e ${props => props.percent}%, #878585 ${props => props.percent}%, #878585 100%);\r\n\r\n  ${StyledVolumeBlock}:hover & {\r\n    display: block;\r\n  }\r\n\r\n  &::-webkit-slider-thumb {\r\n    height: 5px;\r\n    width: 5px;\r\n    appearance: none;\r\n    background: white;\r\n    border-radius: 50%;\r\n  }\r\n\r\n  &::-moz-range-thumb {\r\n    height: 5px;\r\n    width: 5px;\r\n    background: white;\r\n    border-radius: 50%;\r\n    position: relative;\r\n  }\r\n`\r\n\r\nexport const VolumeBlock: React.FC<Partial<ControlsProps>> = ({ handleVolume, handleMuteState, muted, }) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const { setVolume } = bindActionCreators(ActionCreators, dispatch);\r\n  const state = useSelector((state: State) => state.settings);\r\n\r\n  return (\r\n    <StyledVolumeBlock>\r\n      <VolumeBar\r\n        min=\"0\"\r\n        max={maxVolume}\r\n        step=\"0.02\"\r\n        value={state.volume}\r\n        onChange={(event) => {\r\n          setVolume(event.target.valueAsNumber);\r\n          if (handleVolume) {\r\n            handleVolume(event.target.valueAsNumber);\r\n          }\r\n        }}\r\n        percent={useBarColor(state.volume, maxVolume)}\r\n      />\r\n      <Button onClick={handleMuteState} background={ muted ? mutedBtn : volumeBtn } />\r\n    </StyledVolumeBlock>\r\n  )\r\n}","export const maxVolume = 1;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport play from '../../images/play.svg';\r\nimport pause from '../../images/pause.svg';\r\nimport stop from '../../images/stop.svg';\r\nimport fullscreen from '../../images/fullscreen.svg';\r\nimport { ProgressBar } from \"../ProgressBar/ProgressBar\";\r\nimport { ButtonsWrap } from \"../ButtonsWrap/ButtonsWrap\";\r\nimport { ControlsGroup } from \"../ControlsGroup/ControlsGroup\";\r\nimport { TimeDisplay } from \"../TimeDisplay/TimeDisplay\";\r\nimport { Button } from \"../Button/Button\";\r\nimport { VolumeBlock } from \"../VolumeBlock/VolumeBlock\"\r\nimport { ControlsProps } from \"../../models/ControlsProps\";\r\nimport { useBarColor } from \"../../hooks/useBarColor\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ActionCreators, State } from \"../../state\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nconst ControlsWrap = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 40px;\r\n`\r\n\r\nexport const Controls: React.FC<ControlsProps> = ({ handlePlayPause, handleStop, paused, handleFullscreen, handleMuteState, muted, handleVolume, handleVideoRewind }) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const { rewindVideo } = bindActionCreators(ActionCreators, dispatch);\r\n  const state = useSelector((state: State) => state.settings);\r\n\r\n  const timePercent = useBarColor(state.time, state.duration.seconds);\r\n\r\n  return (\r\n    <ControlsWrap>\r\n      <ProgressBar\r\n        min=\"0\"\r\n        max={state.duration.seconds}\r\n        step=\"1\"\r\n        value={state.time}\r\n        onChange={(event) => {\r\n          rewindVideo(event.target.valueAsNumber);\r\n          handleVideoRewind(event.target.valueAsNumber);\r\n        }}\r\n        percent={timePercent}\r\n      />\r\n      <ButtonsWrap>\r\n        <ControlsGroup>\r\n          <Button onClick={handlePlayPause} background={paused ? play : pause} />\r\n          <Button onClick={handleStop} background={stop} />\r\n          <TimeDisplay />\r\n        </ControlsGroup>\r\n        <ControlsGroup>\r\n          <VolumeBlock handleVolume={handleVolume} handleMuteState={handleMuteState} muted={muted} />\r\n          <Button onClick={handleFullscreen} background={fullscreen} />\r\n        </ControlsGroup>\r\n      </ButtonsWrap>\r\n    </ControlsWrap>\r\n  )\r\n}","import React, { useRef } from 'react';\r\nimport styled from \"styled-components\";\r\nimport { Controls } from \"../Controls/Controls\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ActionCreators, State } from \"../../state\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { useMuteVideo } from \"../../hooks/useMuteVideo\";\r\nimport { usePlayPauseStopVideo } from \"../../hooks/usePlayPauseStopVideo\";\r\nimport { FsElementSafari } from \"../../models/FsElementSafari\";\r\nimport {FsDocumentSafari} from \"../../models/FsDocumentSafari\";\r\n\r\nconst VideoWrapper = styled.div`\r\n  width: 60%;\r\n  @media (max-width: 1024px) {\r\n    width: 70%;\r\n  }\r\n  @media (max-width: 768px) {\r\n    width: 80%;\r\n  }\r\n  @media (max-width: 480px) {\r\n    width: 90%;\r\n  }\r\n  @media (max-width: 360px) {\r\n    width: 100%;\r\n  }\r\n  box-shadow: 0 0 10px 1px rgb(3 6 8);\r\n`\r\n\r\nconst StyledVideo = styled.video`\r\n  width: 100%;\r\n  height: calc(100% - 40px);\r\n  display: block;\r\n`\r\n\r\nexport const Video: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const { measureDuration, rewindVideo } = bindActionCreators(ActionCreators, dispatch);\r\n  const state = useSelector((state: State) => state.settings);\r\n\r\n  const vidRef = useRef<HTMLVideoElement>(null);\r\n  const wrapperRef = useRef<HTMLDivElement>(null);\r\n\r\n  const { muted, handleMuteState } = useMuteVideo();\r\n  const { paused, handlePlayPauseVideo, handleStopVideo } = usePlayPauseStopVideo(vidRef);\r\n\r\n  const handleDuration = (): void => {\r\n    if (vidRef.current) {\r\n      measureDuration(Math.floor(vidRef.current.duration));\r\n    }\r\n  }\r\n\r\n  const handleTime = (): void => {\r\n    if (vidRef.current) {\r\n      rewindVideo(Math.floor(vidRef.current.currentTime));\r\n    }\r\n  }\r\n\r\n  const handleVolume = (value: number): void => {\r\n    if (vidRef.current) {\r\n      vidRef.current.volume = value;\r\n    }\r\n  }\r\n\r\n  const handleVideoRewind = (value: number): void => {\r\n    if (vidRef.current) {\r\n      vidRef.current.currentTime = value;\r\n    }\r\n  }\r\n\r\n  const handleFullscreen = (): void => {\r\n      const openFs = (videoWrapper: HTMLElement): void => {\r\n        if (videoWrapper.requestFullscreen) {\r\n          videoWrapper.requestFullscreen();\r\n\r\n        } else { /* Safari */\r\n          const ref = videoWrapper as FsElementSafari;\r\n\r\n          if (ref.webkitRequestFullscreen) {\r\n            ref.webkitRequestFullscreen();\r\n          }\r\n        }\r\n      }\r\n\r\n      const closeFs = (): void => {\r\n        if (document.exitFullscreen) {\r\n          document.exitFullscreen();\r\n\r\n        } else { /* Safari */\r\n          const docSafari = document as FsDocumentSafari;\r\n\r\n          if (docSafari.webkitExitFullscreen) { /* Safari */\r\n            docSafari.webkitExitFullscreen();\r\n          }\r\n        }\r\n      }\r\n\r\n    if (wrapperRef.current && vidRef.current) {\r\n      if (document.fullscreenElement && document.fullscreenElement.id === 'wrapper') {\r\n        closeFs();\r\n      } else {\r\n        openFs(wrapperRef.current);\r\n      }\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <VideoWrapper id=\"wrapper\" ref={wrapperRef}>\r\n      <StyledVideo\r\n        ref={vidRef}\r\n        onTimeUpdate={handleTime}\r\n        onLoadedData={handleDuration}\r\n        muted={muted}\r\n        onClick={handlePlayPauseVideo}\r\n      >\r\n        <source src={state.src} type=\"video/mp4\" />\r\n        Your browser does not support HTML video.\r\n      </StyledVideo>\r\n      <Controls\r\n        handlePlayPause={handlePlayPauseVideo}\r\n        handleStop={handleStopVideo}\r\n        paused={paused}\r\n        handleFullscreen={handleFullscreen}\r\n        handleMuteState={handleMuteState}\r\n        muted={muted}\r\n        handleVolume={handleVolume}\r\n        handleVideoRewind={handleVideoRewind}\r\n      />\r\n    </VideoWrapper>\r\n  )\r\n}","import { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State } from \"../state\";\r\n\r\nexport const useMuteVideo = (): {\r\n  muted: boolean,\r\n  handleMuteState: () => void\r\n} => {\r\n  const state = useSelector((state: State) => state.settings);\r\n  const [muted, setMuted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (state.volume === 0) {\r\n      setMuted(true);\r\n    } else {\r\n      setMuted(false);\r\n    }\r\n  }, [state.volume])\r\n\r\n  const handleMuteState = (): void => {\r\n    setMuted(!muted);\r\n  }\r\n\r\n  return { muted, handleMuteState }\r\n}","import { useState } from \"react\";\r\n\r\nexport const usePlayPauseStopVideo = (vidRef: React.RefObject<HTMLVideoElement>): {\r\n  paused: boolean,\r\n  handlePlayPauseVideo: () => void,\r\n  handleStopVideo: () => void,\r\n} => {\r\n  const [paused, setPaused] = useState(true);\r\n\r\n  const handlePlayPauseVideo = (): void => {\r\n    if (vidRef.current) {\r\n      if (vidRef.current.paused) {\r\n        vidRef.current.play();\r\n        setPaused(false);\r\n      }\r\n      else {\r\n        vidRef.current.pause();\r\n        setPaused(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleStopVideo = (): void =>  {\r\n    if (vidRef.current) {\r\n      vidRef.current.pause();\r\n      vidRef.current.currentTime = 0;\r\n      setPaused(true);\r\n    }\r\n  }\r\n\r\n  return { paused, handlePlayPauseVideo, handleStopVideo }\r\n}","import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  width: 100%;\r\n`\r\n\r\nexport const Wrapper: React.FC = ({children}) => {\r\n  return (\r\n    <StyledWrapper>\r\n      {children}\r\n    </StyledWrapper>\r\n  )\r\n}","import { useEffect } from \"react\";\r\nimport { getVideoUrl } from \"../api/api\";\r\nimport { find } from \"lodash\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { ActionCreators } from \"../state\";\r\n\r\nexport const useVideoUrl = (): void => {\r\n\r\n  const dispatch = useDispatch();\r\n  const { setSrc } = bindActionCreators(ActionCreators, dispatch);\r\n\r\n  useEffect(() => {\r\n    getVideoUrl()\r\n      .then((res) => {\r\n        setSrc(find(res?.data, {format: 'mp4'})?.url)}\r\n      )\r\n      .catch(err => console.log(err));\r\n  }, [setSrc])\r\n\r\n}","export const getVideoUrl =  () => {\r\n  return fetch('https://dl.dropboxusercontent.com/s/jse5lx9xnmcav51/media.json')\r\n    .then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(res.status);\r\n    });\r\n}","import React from 'react';\r\nimport { GlobalStyle } from './styles/global';\r\nimport { Video } from \"./components/Video/Video\";\r\nimport { Wrapper } from \"./components/Wrapper/Wrapper\";\r\nimport { useVideoUrl } from \"./hooks/useVideoUrl\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { State } from \"./state\";\r\n\r\nexport const App: React.FC = () => {\r\n  useVideoUrl();\r\n\r\n  const state = useSelector((state: State) => state.settings);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <GlobalStyle />\r\n      { state.src && <Video /> }\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\nimport { store } from './state/index';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}